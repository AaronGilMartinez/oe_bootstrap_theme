<?php

/**
 * @file
 * The oe_bootstrap_theme hooks.
 */

// Include all files from the includes directory.
use Drupal\oe_bootstrap_theme\DocumentMediaValueExtractor;
use Drupal\file\Entity\File;

$includes_path = __DIR__ . '/includes/*.inc';
foreach (glob($includes_path) as $filename) {
  // The inspection disallowing basename() is not relevant for known paths.
  // phpcs:ignore QualityAssurance.Functions.DrupalWrappers.FoundWithAlternative
  require_once __DIR__ . '/includes/' . basename($filename);
}

/**
 * Implements hook_preprocess().
 */
function oe_bootstrap_theme_preprocess(&$variables) {
  $variables['bcl_icon_path'] = base_path() . drupal_get_path('theme', 'oe_bootstrap_theme') . '/assets/icons/bootstrap-icons.svg';
}

/**
 * Implements hook_preprocess_media__document__default().
 *
 * Prepares the default view mode for the document media type.
 */
function oe_bootstrap_theme_preprocess_media__document__default(&$variables) {
  /** @var \Drupal\media\Entity\Media $media */
  $media = $variables['media'];
  $file_value = DocumentMediaValueExtractor::getFileValue($media);
  if (!$file_value) {
    return;
  }

  $type = $media->get('oe_media_file_type')->value;
  if ($type === "local") {
    $file_entity = File::load($media->get('oe_media_file')->target_id);
    if (!isset($file_entity)) {
      return;
    }
    $variables['original_file_language_name'] = $file_entity->language()->getName();
    $file_value->setLanguageCode($file_entity->language()->getId());
  }

  $num_languages = 0;
  $variables['file'] = $file_value;

  // Generate the file information for all available translations.
  foreach ($media->getTranslationLanguages() as $langcode => $language) {
    // We don't want to include the information of the current language again.
    if ($media->language()->getId() === $langcode) {
      continue;
    }

    $translation = $media->getTranslation($langcode);
    $translation_file_value = DocumentMediaValueExtractor::getFileValue($translation);
    if ($translation_file_value) {
      $variables['translations'][] = $translation_file_value;
      $language_config_storage = \Drupal::entityTypeManager()->getStorage('configurable_language');
      $language_config = $language_config_storage->load($translation_file_value->getLanguageCode());
      $variables['translations']['items'][] = [
        'language' => $language_config->label(),
        'meta' => '(' . format_size($translation_file_value->getSize()) .
        ' - ' . strtoupper($translation_file_value->getExtension()) . ')',
        'download' => [
          'label' => t('Download'),
          'path' => $translation_file_value->getUrl(),
        ],
      ];
      $num_languages++;
    }

  }
  $variables['num_translations'] = $num_languages;
}
