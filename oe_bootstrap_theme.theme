<?php

/**
 * @file
 * The oe_bootstrap_theme hooks.
 */

// Include all files from the includes directory.
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\media\Plugin\media\Source\Image;
use Drupal\media\MediaInterface;
use Drupal\media_avportal\Plugin\media\Source\MediaAvPortalSourceInterface;
use Drupal\oe_bootstrap_theme\ValueObject\ImageValueObject;

$includes_path = __DIR__ . '/includes/*.inc';
foreach (glob($includes_path) as $filename) {
  // The inspection disallowing basename() is not relevant for known paths.
  // phpcs:ignore QualityAssurance.Functions.DrupalWrappers.FoundWithAlternative
  require_once __DIR__ . '/includes/' . basename($filename);
}

/**
 * Implements hook_preprocess().
 */
function oe_bootstrap_theme_preprocess(&$variables) {
  $variables['bcl_icon_path'] = base_path() . drupal_get_path('theme', 'oe_bootstrap_theme') . '/assets/icons/bootstrap-icons.svg';
}

/**
 * Implements hook_preprocess_paragraph() for oe_banner paragraph.
 */
function oe_bootstrap_theme_preprocess_paragraph__oe_banner(array &$variables): void {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  error_log('pasa por aqui 1');

  if (!$paragraph->get('field_oe_title')->isEmpty()) {
    $variables['title'] = $paragraph->get('field_oe_title')->value;
  }

  $variables['description'] = $paragraph->get('field_oe_text')->value;

  if (!$paragraph->get('field_oe_link')->isEmpty()) {
    $link = $paragraph->get('field_oe_link')->first();
    $variables['url'] = $link->getUrl();
    $variables['label'] = $link->get('title')->getValue();
    ;
  }

  $variables['full_width'] = (bool) $paragraph->get('field_oe_banner_full_width')->value;

  // The alignment field value contains the information regarding the pattern
  // type and centering.
  $alignment = $paragraph->get('field_oe_banner_type')->value;
  [$banner_type, $banner_alignment] = explode('_', $alignment);
  // The beginning of the string determines the pattern.
  $variables['pattern'] = 'banner_' . $banner_type;
  // The end of the string determines the position.
  $variables['alignment'] = $banner_alignment;

  $variant = $paragraph->get('oe_paragraphs_variant')->first()->value;
  if ($variant) {
    $variables['variant'] = str_replace('oe_banner_', '', $variant);
  }
  else {
    $variables['variant'] = 'default';
  }
  error_log('pasa por aqui 2');
  if ($variables['variant'] === 'default' || $variables['variant'] === 'primary') {
    return;
  }

  // Bail out if there is no media present.
  if ($paragraph->get('field_oe_media')->isEmpty()) {
    error_log('sale por aqui 2');
    return;
  }
  error_log('pasa por aqui 3');
  $cacheability = CacheableMetadata::createFromRenderArray($variables);

  /** @var \Drupal\media\Entity\Media $media */
  $media = $paragraph->get('field_oe_media')->entity;
  if (!$media instanceof MediaInterface) {
    // The media entity is not available anymore, bail out.
    error_log('sale por aqui 1');
    return;
  }
  error_log('pasa por aqui 4');
  // Retrieve the correct translation to display.
  $media = \Drupal::service('entity.repository')->getTranslationFromContext($media, $paragraph->language()->getId());

  // Caches are handled by the formatter usually. Since we are not rendering
  // the original render arrays, we need to propagate our caches to the
  // paragraph template.
  $cacheability->addCacheableDependency($media);

  // Run access checks on the media entity.
  $access = $media->access('view', $variables['user'], TRUE);
  $cacheability->addCacheableDependency($access);
  if (!$access->isAllowed()) {
    $cacheability->applyTo($variables);
    return;
  }

  $source = $media->getSource();
  // We only support images and AV Portal photos for now.
  if (!$source instanceof MediaAvPortalSourceInterface && !$source instanceof Image) {
    error_log('sale por aqui 5');
    $cacheability->applyTo($variables);
    return;
  }

  $field_name = $source->getConfiguration()['source_field'];
  if ($source instanceof Image && ($file_entity = $media->get($field_name)->entity)) {
    $uri = $file_entity->getFileUri();
    $cacheability->addCacheableDependency($file_entity);
  }
  elseif ($source instanceof MediaAvPortalSourceInterface) {
    $resource_ref = $media->get($field_name)->value;
    $uri = 'avportal://' . $resource_ref . '.jpg';
  }

  // The uri might be empty if the source is of type Image and the file entity
  // was deleted.
  if (empty($uri)) {
    $cacheability->applyTo($variables);
    return;
  }

  $values = [
    'src' => file_create_url($uri),
    'alt' => $source->getMetadata($media, 'thumbnail_alt_value') ?? $media->label(),
    'name' => $media->getName(),
  ];
  $variables['image'] = ImageValueObject::fromArray($values);

  $cacheability->applyTo($variables);
}
